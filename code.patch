diff --git a/core/fpdfapi/page/cpdf_occontext.cpp b/core/fpdfapi/page/cpdf_occontext.cpp
index 56592cbfe..4ddf3df1e 100644
--- a/core/fpdfapi/page/cpdf_occontext.cpp
+++ b/core/fpdfapi/page/cpdf_occontext.cpp
@@ -182,7 +182,7 @@ bool CPDF_OCContext::GetOCGVisible(const CPDF_Dictionary* pOCGDict) const {
   return bState;
 }
 
-bool CPDF_OCContext::CheckObjectVisible(const CPDF_PageObject* pObj) const {
+bool CPDF_OCContextInterface::CheckObjectVisible(const CPDF_PageObject* pObj) const {
   const CPDF_ContentMarks* pMarks = pObj->GetContentMarks();
   for (size_t i = 0; i < pMarks->CountItems(); ++i) {
     const CPDF_ContentMarkItem* item = pMarks->GetItem(i);
diff --git a/core/fpdfapi/page/cpdf_occontext.h b/core/fpdfapi/page/cpdf_occontext.h
index 6083d31ca..07979deaf 100644
--- a/core/fpdfapi/page/cpdf_occontext.h
+++ b/core/fpdfapi/page/cpdf_occontext.h
@@ -18,14 +18,20 @@ class CPDF_Dictionary;
 class CPDF_Document;
 class CPDF_PageObject;
 
-class CPDF_OCContext final : public Retainable {
+class CPDF_OCContextInterface : public Retainable {
+ public:
+  virtual ~CPDF_OCContextInterface() = default;
+  virtual bool CheckOCGVisible(const CPDF_Dictionary* pOCGDict) const = 0;
+  virtual bool CheckObjectVisible(const CPDF_PageObject* pObj) const;
+};
+
+class CPDF_OCContext : public CPDF_OCContextInterface {
  public:
   enum UsageType { View = 0, Design, Print, Export };
 
   CONSTRUCT_VIA_MAKE_RETAIN;
 
-  bool CheckOCGVisible(const CPDF_Dictionary* pOCGDict) const;
-  bool CheckObjectVisible(const CPDF_PageObject* pObj) const;
+  bool CheckOCGVisible(const CPDF_Dictionary* pOCGDict) const override;
 
  private:
   CPDF_OCContext(CPDF_Document* pDoc, UsageType eUsageType);
diff --git a/core/fpdfapi/render/cpdf_renderoptions.h b/core/fpdfapi/render/cpdf_renderoptions.h
index 2a383a53d..62bffa082 100644
--- a/core/fpdfapi/render/cpdf_renderoptions.h
+++ b/core/fpdfapi/render/cpdf_renderoptions.h
@@ -66,17 +66,19 @@ class CPDF_RenderOptions {
   void SetDrawAnnots(bool draw) { m_bDrawAnnots = draw; }
   bool GetDrawAnnots() const { return m_bDrawAnnots; }
 
-  void SetOCContext(RetainPtr<CPDF_OCContext> context) {
+  void SetOCContext(RetainPtr<CPDF_OCContextInterface> context) {
     m_pOCContext = context;
   }
-  const CPDF_OCContext* GetOCContext() const { return m_pOCContext.Get(); }
+  const CPDF_OCContextInterface* GetOCContext() const {
+    return m_pOCContext.Get();
+  }
 
  private:
   Type m_ColorMode = kNormal;
   bool m_bDrawAnnots = false;
   Options m_Options;
   ColorScheme m_ColorScheme;
-  RetainPtr<CPDF_OCContext> m_pOCContext;
+  RetainPtr<CPDF_OCContextInterface> m_pOCContext;
 };
 
 #endif  // CORE_FPDFAPI_RENDER_CPDF_RENDEROPTIONS_H_
diff --git a/core/fpdfdoc/cpdf_annotlist.cpp b/core/fpdfdoc/cpdf_annotlist.cpp
index e8b4c09d9..9ec31aec1 100644
--- a/core/fpdfdoc/cpdf_annotlist.cpp
+++ b/core/fpdfdoc/cpdf_annotlist.cpp
@@ -246,7 +246,7 @@ void CPDF_AnnotList::DisplayPass(CPDF_Page* pPage,
 
     if (pOptions) {
       const CPDF_Dictionary* pAnnotDict = pAnnot->GetAnnotDict();
-      const CPDF_OCContext* pOCContext = pOptions->GetOCContext();
+      const auto pOCContext = pOptions->GetOCContext();
       if (pAnnotDict && pOCContext &&
           !pOCContext->CheckOCGVisible(
               pAnnotDict->GetDictFor(pdfium::annotation::kOC))) {
diff --git a/third_party/BUILD.gn b/third_party/BUILD.gn
index f2c599941..6dab9a313 100644
--- a/third_party/BUILD.gn
+++ b/third_party/BUILD.gn
@@ -388,6 +388,12 @@ source_set("fx_libopenjpeg") {
     # Must be after no_chromium_code for warning flags to be ordered correctly.
     ":fx_libopenjpeg_warnings",
   ]
+
+  if (is_posix) {
+    configs +=
+        [ "//build/config/gcc:symbol_visibility_hidden" ]
+  }
+
   sources = [
     "libopenjpeg20/bio.c",
     "libopenjpeg20/cio.c",
